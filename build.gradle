/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.2.1/userguide/tutorial_java_projects.html
 */

plugins {
    // add web application archive support
    // id 'java'
    id 'war'
    id 'org.gretty' version '2.3.1' 
    // code coverage
    id "jacoco"
    // static code analysis
    // id "pmd"
    // post build results online                                        
    id "com.gradle.build-scan" version "2.0.2"        
    // git clone, etc. 
    id "org.ajoberstar.grgit" version "2.3.0"    
    // google java format
    id 'com.github.sherter.google-java-format' version '0.8'   
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'
version = '0.1.0'

repositories {
    mavenCentral()
}

configurations {
  codacy
}

dependencies {
    // javax.servlet
    providedCompile "javax.servlet:javax.servlet-api:4.0.1"
    // Use JUnit test framework
    testCompile "junit:junit-dep:4.11"
    // com.googlecode.json.simple
    compile "com.googlecode.json-simple:json-simple:1.1.1"
    // org.apache.commons.math3
    compile "org.apache.commons:commons-math3:3.6.1"
    // gov.nist.math.jama
    compile "gov.nist.math:jama:1.0.2"
}

// method to add/update an external project from git and add it to the 
// sourceset
ext.addExternalProject = { path, url, srcDir ->
  File projDir = new File("$path")
  // clone project if it doesn't exist locally
  if(!projDir.exists()) {
    grgit.clone(dir: projDir, uri: url)
  }
  // pull the project if it does exist locally
  else {
    grgit.open(dir: projDir)
    grgit.pull(branch: "master")
    grgit.close()
  }

  // add to sourceset
  sourceSets {
    main {
      java {
          srcDirs "$path/$srcDir"
      }
    }
  }
}

// Note: To reformat all java code (not in lib) into the 
// google java style, run ./gradlew goJF
googleJavaFormat {
  exclude 'lib/**'
}
// Google java style is checked automatically as part of the check task
project.tasks.check.dependsOn(verifyGoogleJavaFormat)

// coverage reports
jacoco {
  toolVersion "0.8.2"
}
jacocoTestReport {
  reports {
    html.enabled true
    xml.enabled true
  }

  // exclude librarys 
  afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'gov/usgs/traveltime/**', 
                    'gov/usgs/processingformats/**'
            ])
        })
    }
}
check.dependsOn jacocoTestReport

test {
  filter {
    includeTestsMatching "*Test"
  }
}

// clone/update external libs from github, at least until they're available in
// maven
task cloneExternalProjects {
  description 'Clones/Updates external project(s).'
  
  doFirst {
    // neic-traveltime
    addExternalProject("$projectDir/lib/neic-traveltime", 
      "https://github.com/usgs/neic-traveltime.git", "src")

    // earthquake-processing-formats
    addExternalProject("$projectDir/lib/earthquake-processing-formats", 
      "https://github.com/usgs/earthquake-processing-formats.git", "java/src")
  }
}

// copy required model files
task copyModelFiles(type: Copy) {
  description 'Copies required model files to build directory.'
  dependsOn 'cloneExternalProjects'
  from "models", "$projectDir/lib/neic-traveltime/models/"
  exclude "README.txt"
  into "$buildDir/models"
}

// make sure we always update the external projects and copy models prior to 
// complile
defaultTasks 'cloneExternalProjects', 'copyModelFiles'
copyModelFiles.dependsOn 'cloneExternalProjects'
compileJava.dependsOn 'cloneExternalProjects', 'copyModelFiles'

// show compile warnings
tasks.withType(JavaCompile) {
  options.setDeprecation(true);
  options.setWarnings(true);
}

// set jar entry point
jar {
  manifest {
    attributes(
      'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
      'Main-Class': 'gov.usgs.locator.LocMain'
    )
  }
  from {
      configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
  }
}

// create javadocs
javadoc {
  exclude "gov/usgs/processingformats/**"
  if(JavaVersion.current() != JavaVersion.VERSION_1_8) {
    options.addBooleanOption('html5', true)
  }
}


// Tasks for TravisCI

// run with "gradle build --scan" to post build output online
buildScan {
  termsOfServiceUrl = "https://gradle.com/terms-of-service"
  termsOfServiceAgree = "yes"
}

// .travis.yml uses this to upload coverage
task sendCoverageToCodacy(type: JavaExec, dependsOn: jacocoTestReport) {
  description = "Upload coverage to codacy (used by TravisCI)"
  main = "com.codacy.CodacyCoverageReporter"
  classpath = configurations.codacy
  args = [
    "report",
    "-l",
    "Java",
    "-r",
    "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
  ]
}