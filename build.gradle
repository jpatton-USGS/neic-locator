/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.2.1/userguide/tutorial_java_projects.html
 */

plugins {
    // java application
    id "application"
    // jar bundling
    id "com.github.johnrengelman.shadow" version "5.0.0"
    // code coverage
    id "jacoco"
    // static code analysis
    // id "pmd"
    // post build results online
    id "com.gradle.build-scan" version "2.0.2"
    // git clone, etc.
    id "org.ajoberstar.grgit" version "2.3.0"
    // google java format
    id "com.github.sherter.google-java-format" version "0.8"
    // manage micronaut dependencies
    id "io.spring.dependency-management" version "1.0.8.RELEASE"
}

sourceCompatibility = "1.8"
targetCompatibility = "1.8"
version = "0.2.0"

repositories {
    mavenCentral()
}

configurations {
  codacy
}

dependencyManagement {
    imports {
        mavenBom "io.micronaut:micronaut-bom:1.1.0"
    }
}

dependencies {
    // micronaut
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    annotationProcessor "io.micronaut.configuration:micronaut-openapi"
    compile "io.micronaut:micronaut-inject"
    compile "io.micronaut:micronaut-validation"
    compile "io.micronaut:micronaut-runtime"
    compile "io.micronaut:micronaut-http-client"
    compile "io.micronaut:micronaut-http-server-netty"
    compile "io.swagger.core.v3:swagger-annotations"
    compile "ch.qos.logback:logback-classic:1.2.3"

    // com.googlecode.json.simple
    compile "com.googlecode.json-simple:json-simple:1.1.1"
    // org.apache.commons.math3
    compile "org.apache.commons:commons-math3:3.6.1"
    // gov.nist.math.jama
    compile "gov.nist.math:jama:1.0.3"

    // Use JUnit 5
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testCompile "io.micronaut.test:micronaut-test-junit5:1.0.4"
    //testCompile "org.mockito:mockito-junit-jupiter:2.22.0"
    testCompile "org.junit.jupiter:junit-jupiter-api:5.4.2"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:5.4.2"

}

// method to add/update an external project from git and add it to the
// sourceset
ext.addExternalProject = { path, url, branch, srcDir ->
  File projDir = new File("$path")

  // cleanup local copy if it exists
  // (we do this because grgit.pull doesn't seem to update
  // local files, yes this is slow)
  if(projDir.exists()) {
    projDir.deleteDir()
  }

  // clone external project
  logger.quiet('Cloning {}', projDir)
  grgit.clone(dir: projDir, uri: url, refToCheckout: branch)

  // add to sourceset
  sourceSets {
    main {
      java {
          srcDirs "$path/$srcDir"
          // Exclude TtMain.java
          // We do this to avoid build errors due to the
          // unwanted traveltime web service code
          exclude '*TtMain.java*'
      }
    }
  }
}

// mainClassName = "gov.usgs.locatorservice.Application"
mainClassName = "gov.usgs.locator.LocMain"

// Note: To reformat all java code (not in lib) into the
// google java style, run ./gradlew goJF
googleJavaFormat {
  exclude "lib/**"
}
// Google java style is checked automatically as part of the check task
project.tasks.check.dependsOn(verifyGoogleJavaFormat)

// coverage reports
jacoco {
  toolVersion "0.8.2"
}
jacocoTestReport {
  reports {
    html.enabled true
    xml.enabled true
  }

  // exclude librarys
  afterEvaluate {
        getClassDirectories().from(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "gov/usgs/traveltime/**",
                    "gov/usgs/processingformats/**",
                    "gov/usgs/detectionformats/**"
            ])
        }))
    }
}
check.dependsOn jacocoTestReport

test {
  useJUnitPlatform()
  filter {
    includeTestsMatching "*Test"
  }
}

// clone/update external libs from github, at least until they're available in
// maven
task cloneExternalProjects {
  description "Clones/Updates external project(s)."

  doFirst {
    // neic-traveltime
    // addExternalProject("$projectDir/lib/neic-traveltime",
    //  "https://github.com/usgs/neic-traveltime.git", "master", "src/main/java/gov/usgs/traveltime")
    // grab src/main/java/gov/usgs/traveltime subdir of src to avoid compiling tests and the webservice code
    addExternalProject("$projectDir/lib/neic-traveltime",
      "https://github.com/jpatton-USGS/neic-traveltime.git", "web-service", "src/main/java/gov/usgs/traveltime")

    // earthquake-processing-formats
    // grab the main subdir of src to avoid compiling tests
    addExternalProject("$projectDir/lib/earthquake-processing-formats",
      "https://github.com/usgs/earthquake-processing-formats.git", "master", "java/src/main")

    // earthquake-detection-formats
    // grab the main subdir of src to avoid compiling tests
    addExternalProject("$projectDir/lib/earthquake-detection-formats",
      "https://github.com/usgs/earthquake-detection-formats.git", "master", "java/src/main")
  }
}

// copy required model files
task copyModelFiles(type: Copy) {
  description "Copies required model files to build directory."
  dependsOn "cloneExternalProjects"
  from "models", "$projectDir/lib/neic-traveltime/models/"
  exclude "README.txt"
  into "$buildDir/models"
}

// make sure we always update the external projects and copy models prior to
// complile
defaultTasks "cloneExternalProjects", "copyModelFiles"
copyModelFiles.dependsOn "cloneExternalProjects"
compileJava.dependsOn "cloneExternalProjects", "copyModelFiles"

// show compile warnings
tasks.withType(JavaCompile) {
  options.compilerArgs.add("-parameters")
  options.encoding = "UTF-8"
  options.setDeprecation(true);
  options.setWarnings(true);
}

shadowJar {
  mergeServiceFiles()
}


// create javadocs
javadoc {
  exclude "**/gov/usgs/processingformats/**"
  exclude "**/gov/usgs/detectionformats/**"
  if(JavaVersion.current() != JavaVersion.VERSION_1_8) {
    options.addBooleanOption('html5', true)
  }
}


// Tasks for TravisCI

// run with "gradle build --scan" to post build output online
buildScan {
  termsOfServiceUrl = "https://gradle.com/terms-of-service"
  termsOfServiceAgree = "yes"
}

// .travis.yml uses this to upload coverage
task sendCoverageToCodacy(type: JavaExec, dependsOn: jacocoTestReport) {
  description = "Upload coverage to codacy (used by TravisCI)"
  main = "com.codacy.CodacyCoverageReporter"
  classpath = configurations.codacy
  args = [
    "report",
    "-l",
    "Java",
    "-r",
    "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
  ]
}